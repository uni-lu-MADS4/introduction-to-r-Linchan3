---
title: "Getting started with R"
author: Linchan He
date: today
format: html
---

### Exercise 1 {#sec-1}

* Create a vector of the letters A, B and C.

```{r}
# Your answer in code
vec1 <- LETTERS[1:3]
vec1
```
> Your answer as text



* Assign the vector to a variable `my_letters`
```{r}
# Your answer in code
my_letters <- vec1
my_letters
```


* Check the what happens when you run `letters` (just this) on the command line.
```{r}
# Your answer in code
letters
```

> Your answer as text
The letters object in R is a built-in constant that contains the lowercase English alphabet. When I run letters, it will return all 26 lowercase letters.


* What happens when you concatenate two vectors? Add `c(my_letters , my_letters)`
```{r}
# Your answer in code
c(my_letters , my_letters)
```

> Your answer as text
It will result in a vector that contains the elements of my_letters twice.


* Add the number 1 to letters. What happens to the type of the vector?
```{r}
# Your answer in code
c(1, letters)
typeof(letters)
typeof(c(1, letters))
```

> Your answer as text
R will automatically coerce the number to a character type.


### Exercise 2


1. Create a vector `my_vec` with the numbers from 1 through 8.
2. Apply the operation `+2` to the vector/
3. Add the vector containing 1, 2, 3, 4 to `my_vec`. What do you observe?

```{r}
# Your answer in code
my_vec <- 1:8
my_vec
my_vec + 2
my_vec_new <- my_vec + c(1, 2, 3, 4)
my_vec_new
```



### Exercise 3

* Consider the R output of the matrix below:

```
 [,1] [,2]
 [1,]    4    1
 [2,]    9    5
 [3,]   10    7
```

1. What was one of the correct commands used to write this matrix?
2. Assign the matrix as `A`
3. Check the dimensions
4. Extract the element `5`
5. Add the vector `c(0,0,0)` as a new column and update `A`
6. Modify the element 4 to `0`
7. Compute the transpose of `A`

```{r}
# Your answer in code
c(4, 9, 10, 1, 5, 7) |> 
  matrix(nrow = 3, ncol = 2)
A <- matrix(c(4, 9, 10, 1, 5, 7), nrow = 3, ncol = 2)
dim(A)
A[2,2]
A <- cbind(A, c(0, 0, 0))
A
A[1,1] <- 0
A
t(A)
```


8. Are any values in `A` larger than 10? 
```{r}
# Your answer in code
any(A > 10)
```

9. Are all values in `A` smaller than 10?
```{r}
# Your answer in code
all(A < 10)
```

### Exercise 4

1. Create a function that sums up two values even if provided as characters values

```{r}
# Your answer in code
my_function <- function(x, y){
  x <- as.numeric(x)
  y <- as.numeric(y)
  x + y
}
my_function("1", "2")
```


### Exercise 5

1. Create a function that returns the mean, median and standard deviation.

```{r}
# Your answer in code
my_function1 <- function(x){
  mean(x)
  median(x)
  sd(x)
  list(mean(x), median(x), sd(x))
}
my_function1(c(1, 2, 3))
```


### Exercise 6
1. Create a pipe statement that counts the number of NAs in vector containing numbers, characters and missing values.
The output of `c('1' , "a", NA, "2", NA)` should be 2.

```{r}
# Your answer in code
c('1' , "a", NA, "2", NA) |> 
  is.na() |> 
  sum()
```


